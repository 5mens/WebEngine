@page "/administrator/menu/{MenuId:int}/items/"

@inject IDbContextFactory<AppDbContext> DbFactory
@inject NavigationManager Nav
@inject IMenuItem MyMenuItem
<MudPaper Class="ma-2" Elevation="0">
    <MudText Typo="Typo.h5" Class="pt-3">Список меню</MudText>
    <MudDivider DividerType="DividerType.Middle" />
</MudPaper>
<MudPaper Class="ma-2" Elevation="0">
    <MudButton Class="ma-1 mt-2" OnClick="()=>AddNewMenu()" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" Color="Color.Primary" Size="Size.Medium">Создать</MudButton>
    <MudButton Class="ma-1 mt-2" OnClick="()=>EditMenu()" Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Size="Size.Medium">Изменить</MudButton>
    <MudButton Class="ma-1 mt-2" OnClick="()=>DeleteMenu()" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Medium">Удалить</MudButton>
</MudPaper>
<MudTable Class="table app-table-hover mb-0 text-left" Items="@Elements" Hover="@hover" SortLabel="Сортировка по:" MultiSelection="true" Dense="@dense" @bind-SelectedItems="selectedItems" Filter="new Func<MenuItem,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Список элементов меню</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Поиск" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<MenuItem, object>(x=>x.Id)">Id</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel Enabled="@enabled" SortBy="new Func<MenuItem, object>(x=>x.Title)">Наименование</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MenuItem, object>(x=>x.Desc)">Описание</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MenuItem, object>(x=>x.Menutype)">Позиция</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<MenuItem, object>(x=>x.ParentId)">Родитель</MudTableSortLabel></MudTh>
        <MudTh>Статус</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.Id</MudTd>
        <MudTd DataLabel="Title">@context.Title</MudTd>
        <MudTd DataLabel="Desc">@context.Desc</MudTd>
        <MudTd DataLabel="Menutype">@context.Menutype</MudTd>
        <MudTd DataLabel="ParentId">@context.ParentId</MudTd>
        <MudTd>
            <MudRating MaxValue="1" SelectedValue="1" FullIcon="@Icons.Material.Filled.Visibility" EmptyIcon="@Icons.Material.Filled.VisibilityOff" />
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager Class="" PageSizeOptions="new int[]{20, 50, 100}" RowsPerPageString="Выводить по:" InfoFormat="{first_item}-{last_item} из {all_items}" />
    </PagerContent>
</MudTable>
<MudText Inline="true">Выбранные значения: @(selectedItems==null ? "" : string.Join(", ", selectedItems.OrderBy(x=>x.Title).Select(x=>x.Title)))</MudText>

@code {
    [Parameter]
    public int MenuId { get; set; } = 0;

    private string searchString = "";
    private MenuItem selectedItem = null;
    private bool disabled = false;
    private bool dense = false;
    private bool hover = true;
    private bool enabled = true;
    private IEnumerable<MenuItem> Elements = new List<MenuItem>();
    private bool Busy;
    private AppDbContext Context { get; set; }
    private HashSet<MenuItem> selectedItems = new HashSet<MenuItem>();

    protected override async Task OnInitializedAsync()
    {
        Busy = true;

        try
        {
            Context = DbFactory.CreateDbContext();
            Elements = await Context.MenuItem.ToListAsync();
        }
        finally
        {
            Busy = false;
        }
        await base.OnInitializedAsync();
    }
    private bool FilterFunc(MenuItem element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Desc.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id} {element.Menutype}".Contains(searchString))
            return true;
        return false;
    }

    private void AddNewMenu()
    {
        Nav.NavigateTo($"/administrator/menu/{MenuId}/item/add");
    }

    private void EditMenu()
    {
        if (selectedItems.Count == 1)
        {
            foreach (var item in selectedItems)
            {
                Nav.NavigateTo($"/administrator/menu/{MenuId}/edit/{item.Id}");
            }
        }
    }

    private void DeleteMenu()
    {
        //MyMenuItem.DeleteMenu(selectedItems.ToList<Menu>());
    }
}
